/*
 * MyOhioAssembly.com Public API
 * REST API for MyOhioAssembly.com
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@myohioassembly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MyOhioAssemblycomPublicApi);
  }
}(this, function(expect, MyOhioAssemblycomPublicApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MembersBody', function() {
      beforeEach(function() {
        instance = new MyOhioAssemblycomPublicApi.MembersBody();
      });

      it('should create an instance of MembersBody', function() {
        // TODO: update the code to test MembersBody
        expect(instance).to.be.a(MyOhioAssemblycomPublicApi.MembersBody);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property passwordConf (base name: "passwordConf")', function() {
        // TODO: update the code to test the property passwordConf
        expect(instance).to.have.property('passwordConf');
        // expect(instance.passwordConf).to.be(expectedValueLiteral);
      });

      it('should have the property recordingSecretaryEmail (base name: "recordingSecretaryEmail")', function() {
        // TODO: update the code to test the property recordingSecretaryEmail
        expect(instance).to.have.property('recordingSecretaryEmail');
        // expect(instance.recordingSecretaryEmail).to.be(expectedValueLiteral);
      });

      it('should have the property coordinatorEmail (base name: "coordinatorEmail")', function() {
        // TODO: update the code to test the property coordinatorEmail
        expect(instance).to.have.property('coordinatorEmail');
        // expect(instance.coordinatorEmail).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "firstName")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property middleName (base name: "middleName")', function() {
        // TODO: update the code to test the property middleName
        expect(instance).to.have.property('middleName');
        // expect(instance.middleName).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "lastName")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property dob (base name: "dob")', function() {
        // TODO: update the code to test the property dob
        expect(instance).to.have.property('dob');
        // expect(instance.dob).to.be(expectedValueLiteral);
      });

      it('should have the property addrLine1 (base name: "addrLine1")', function() {
        // TODO: update the code to test the property addrLine1
        expect(instance).to.have.property('addrLine1');
        // expect(instance.addrLine1).to.be(expectedValueLiteral);
      });

      it('should have the property addrLine2 (base name: "addrLine2")', function() {
        // TODO: update the code to test the property addrLine2
        expect(instance).to.have.property('addrLine2');
        // expect(instance.addrLine2).to.be(expectedValueLiteral);
      });

      it('should have the property addrCity (base name: "addrCity")', function() {
        // TODO: update the code to test the property addrCity
        expect(instance).to.have.property('addrCity');
        // expect(instance.addrCity).to.be(expectedValueLiteral);
      });

      it('should have the property addrState (base name: "addrState")', function() {
        // TODO: update the code to test the property addrState
        expect(instance).to.have.property('addrState');
        // expect(instance.addrState).to.be(expectedValueLiteral);
      });

      it('should have the property addrZip (base name: "addrZip")', function() {
        // TODO: update the code to test the property addrZip
        expect(instance).to.have.property('addrZip');
        // expect(instance.addrZip).to.be(expectedValueLiteral);
      });

      it('should have the property addrCounty (base name: "addrCounty")', function() {
        // TODO: update the code to test the property addrCounty
        expect(instance).to.have.property('addrCounty');
        // expect(instance.addrCounty).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property emailAlt (base name: "emailAlt")', function() {
        // TODO: update the code to test the property emailAlt
        expect(instance).to.have.property('emailAlt');
        // expect(instance.emailAlt).to.be(expectedValueLiteral);
      });

    });
  });

}));
