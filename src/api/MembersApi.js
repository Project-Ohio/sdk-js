/**
 * MyOhioAssembly.com Public API
 * REST API for MyOhioAssembly.com
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: contact@myohioassembly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthEmailUpdateVerify404Response from '../model/AuthEmailUpdateVerify404Response';
import AuthLoginCreate400Response from '../model/AuthLoginCreate400Response';
import AuthLoginCreate401Response from '../model/AuthLoginCreate401Response';
import AuthLoginCreate403Response from '../model/AuthLoginCreate403Response';
import MemberUpdateRequest from '../model/MemberUpdateRequest';
import MembersCreateRequest from '../model/MembersCreateRequest';
import MembersDeleteOne200Response from '../model/MembersDeleteOne200Response';
import MembersList200Response from '../model/MembersList200Response';
import MembershipSignup201Response from '../model/MembershipSignup201Response';
import MembershipSignup409Response from '../model/MembershipSignup409Response';
import MembershipSignupRequest from '../model/MembershipSignupRequest';

/**
* Members service.
* @module api/MembersApi
* @version 0.1.0
*/
export default class MembersApi {

    /**
    * Constructs a new MembersApi. 
    * @alias module:api/MembersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the memberUpdate operation.
     * @callback module:api/MembersApi~memberUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembershipSignup201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing member
     * Update member.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {Object} opts Optional parameters
     * @param {module:model/MemberUpdateRequest} [memberUpdateRequest] 
     * @param {module:api/MembersApi~memberUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembershipSignup201Response}
     */
    memberUpdate(memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['memberUpdateRequest'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberUpdate");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MembershipSignup201Response;
      return this.apiClient.callApi(
        '/members/{memberId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersCreate operation.
     * @callback module:api/MembersApi~membersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembershipSignup201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new member
     * Create new member (unverified)
     * @param {Object} opts Optional parameters
     * @param {module:model/MembersCreateRequest} [membersCreateRequest] 
     * @param {module:api/MembersApi~membersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembershipSignup201Response}
     */
    membersCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['membersCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MembershipSignup201Response;
      return this.apiClient.callApi(
        '/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersDeleteOne operation.
     * @callback module:api/MembersApi~membersDeleteOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembersDeleteOne200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete member
     * Deletes existing non-deleted member.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {module:api/MembersApi~membersDeleteOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembersDeleteOne200Response}
     */
    membersDeleteOne(memberId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling membersDeleteOne");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MembersDeleteOne200Response;
      return this.apiClient.callApi(
        '/members/{memberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersGetOne operation.
     * @callback module:api/MembersApi~membersGetOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembershipSignup201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one member
     * Retrieve member.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {module:api/MembersApi~membersGetOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembershipSignup201Response}
     */
    membersGetOne(memberId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling membersGetOne");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MembershipSignup201Response;
      return this.apiClient.callApi(
        '/members/{memberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersList operation.
     * @callback module:api/MembersApi~membersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembersList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List members
     * Retrieve list of all members.  This operation is restricted to elevated roles.
     * @param {module:api/MembersApi~membersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembersList200Response}
     */
    membersList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MembersList200Response;
      return this.apiClient.callApi(
        '/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipSignup operation.
     * @callback module:api/MembersApi~membershipSignupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembershipSignup201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new member via public signup
     * Create new member (unverified)
     * @param {Object} opts Optional parameters
     * @param {module:model/MembershipSignupRequest} [membershipSignupRequest] 
     * @param {module:api/MembersApi~membershipSignupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembershipSignup201Response}
     */
    membershipSignup(opts, callback) {
      opts = opts || {};
      let postBody = opts['membershipSignupRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MembershipSignup201Response;
      return this.apiClient.callApi(
        '/memberships/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
