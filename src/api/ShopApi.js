/*
 * MyOhioAssembly.com Public API
 * REST API for MyOhioAssembly.com
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@myohioassembly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20016} from '../model/InlineResponse20016';
import {InlineResponse20017} from '../model/InlineResponse20017';
import {InlineResponse20018} from '../model/InlineResponse20018';
import {InlineResponse20019} from '../model/InlineResponse20019';
import {InlineResponse20020} from '../model/InlineResponse20020';
import {InlineResponse20021} from '../model/InlineResponse20021';
import {InlineResponse20022} from '../model/InlineResponse20022';
import {InlineResponse20023} from '../model/InlineResponse20023';
import {InlineResponse2012} from '../model/InlineResponse2012';
import {InlineResponse2013} from '../model/InlineResponse2013';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {InlineResponse404} from '../model/InlineResponse404';
import {InlineResponse40910} from '../model/InlineResponse40910';
import {InlineResponse40911} from '../model/InlineResponse40911';
import {InlineResponse40912} from '../model/InlineResponse40912';
import {InlineResponse4097} from '../model/InlineResponse4097';
import {InlineResponse4098} from '../model/InlineResponse4098';
import {InlineResponse4099} from '../model/InlineResponse4099';
import {ItemsItemIdBody} from '../model/ItemsItemIdBody';
import {ItemsItemIdBody1} from '../model/ItemsItemIdBody1';
import {OrderIdPaymentsBody} from '../model/OrderIdPaymentsBody';
import {OrdersOrderIdBody} from '../model/OrdersOrderIdBody';
import {PurchaseItemIdFulfillmentStatusBody} from '../model/PurchaseItemIdFulfillmentStatusBody';
import {PurchaseItemsPurchaseItemIdBody} from '../model/PurchaseItemsPurchaseItemIdBody';
import {ShopItemsBody} from '../model/ShopItemsBody';
import {ShopPurchaseItemFulfillmentStatus} from '../model/ShopPurchaseItemFulfillmentStatus';

/**
* Shop service.
* @module api/ShopApi
* @version 0.1.0
*/
export class ShopApi {

    /**
    * Constructs a new ShopApi. 
    * @alias module:api/ShopApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the memberOrderDeleteOne operation.
     * @callback moduleapi/ShopApi~memberOrderDeleteOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete order
     * Delete order.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {module:api/ShopApi~memberOrderDeleteOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrderDeleteOne(memberId, orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrderDeleteOne");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrderDeleteOne");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrderItemsQuantityUpdateOne operation.
     * @callback moduleapi/ShopApi~memberOrderItemsQuantityUpdateOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update order item quantity
     * Update order item.  This operation results in adding an item if not already added.  This operation results in removing an item if quantity is zero.  This operation is restricted to auth member id and elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {String} itemId item id
     * @param {Number} quantity item quantity
     * @param {module:api/ShopApi~memberOrderItemsQuantityUpdateOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrderItemsQuantityUpdateOne(memberId, orderId, itemId, quantity, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrderItemsQuantityUpdateOne");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrderItemsQuantityUpdateOne");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling memberOrderItemsQuantityUpdateOne");
      }
      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling memberOrderItemsQuantityUpdateOne");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId,'itemId': itemId,'quantity': quantity
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/items/{itemId}/quantity/{quantity}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrderItemsUpdateOne operation.
     * @callback moduleapi/ShopApi~memberOrderItemsUpdateOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update order item
     * Update order item.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {String} itemId item id
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemsItemIdBody1} opts.body 
     * @param {module:api/ShopApi~memberOrderItemsUpdateOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrderItemsUpdateOne(memberId, orderId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrderItemsUpdateOne");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrderItemsUpdateOne");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling memberOrderItemsUpdateOne");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId,'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/items/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrderPaymentList operation.
     * @callback moduleapi/ShopApi~memberOrderPaymentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List order payments
     * Return all payments.  This operation is restricted to elevated roles.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeDeleted 
     * @param {module:api/ShopApi~memberOrderPaymentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrderPaymentList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/members/orders/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrderPaymentsCreate operation.
     * @callback moduleapi/ShopApi~memberOrderPaymentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create order payment
     * Create payment associated with SUBMITTED order.  Will only be successful if order is in SUBMITTED status.  The methodCardLast4 is required if method is CARD.  This operation is restricted to auth member id and elevated roles
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {Object} opts Optional parameters
     * @param {module:model/OrderIdPaymentsBody} opts.body 
     * @param {module:api/ShopApi~memberOrderPaymentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrderPaymentsCreate(memberId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrderPaymentsCreate");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrderPaymentsCreate");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrderPaymentsDeleteOne operation.
     * @callback moduleapi/ShopApi~memberOrderPaymentsDeleteOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete order payment
     * Deletes existing non-deleted member.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {String} paymentId payment id
     * @param {module:api/ShopApi~memberOrderPaymentsDeleteOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrderPaymentsDeleteOne(memberId, orderId, paymentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrderPaymentsDeleteOne");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrderPaymentsDeleteOne");
      }
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling memberOrderPaymentsDeleteOne");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId,'paymentId': paymentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/payments/{paymentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrderPaymentsUpdateOneCancel operation.
     * @callback moduleapi/ShopApi~memberOrderPaymentsUpdateOneCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel order payment
     * Update status of payment associated with order to CANCELLED.  This operation will only be successful if payment status is already PENDING.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {String} paymentId payment id
     * @param {module:api/ShopApi~memberOrderPaymentsUpdateOneCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrderPaymentsUpdateOneCancel(memberId, orderId, paymentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrderPaymentsUpdateOneCancel");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrderPaymentsUpdateOneCancel");
      }
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling memberOrderPaymentsUpdateOneCancel");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId,'paymentId': paymentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/payments/{paymentId}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrderPaymentsUpdateOneComplete operation.
     * @callback moduleapi/ShopApi~memberOrderPaymentsUpdateOneCompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete order payment
     * Update status of payment associated with order to COMPLETE.  This operation will only be successful if payment status is already PENDING.  This operation will also change the associated order status to PAID.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {String} paymentId payment id
     * @param {module:api/ShopApi~memberOrderPaymentsUpdateOneCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrderPaymentsUpdateOneComplete(memberId, orderId, paymentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrderPaymentsUpdateOneComplete");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrderPaymentsUpdateOneComplete");
      }
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling memberOrderPaymentsUpdateOneComplete");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId,'paymentId': paymentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/payments/{paymentId}/complete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrderPaymentsUpdateOneRefund operation.
     * @callback moduleapi/ShopApi~memberOrderPaymentsUpdateOneRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund order payment
     * Update status of payment associated with order to REFUNDED.  This operation will only be successful if payment status is already COMPLETE.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {String} paymentId payment id
     * @param {module:api/ShopApi~memberOrderPaymentsUpdateOneRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrderPaymentsUpdateOneRefund(memberId, orderId, paymentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrderPaymentsUpdateOneRefund");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrderPaymentsUpdateOneRefund");
      }
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling memberOrderPaymentsUpdateOneRefund");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId,'paymentId': paymentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/payments/{paymentId}/refund', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrdersCreate operation.
     * @callback moduleapi/ShopApi~memberOrdersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new order
     * Create new order owned by memberId.  This operation is restricted to auth member&#x27;s memberId unless role is elevated.
     * @param {String} memberId member id
     * @param {module:api/ShopApi~memberOrdersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrdersCreate(memberId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrdersCreate");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrdersList operation.
     * @callback moduleapi/ShopApi~memberOrdersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List member orders
     * Returns all member orders.  This operation is restricted to auth memberId or elevated roles.
     * @param {String} memberId member id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeDeleted 
     * @param {module:api/ShopApi~memberOrdersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrdersList(memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrdersList");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/members/{memberId}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrdersUpdateOne operation.
     * @callback moduleapi/ShopApi~memberOrdersUpdateOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update member order
     * Update order owned by memberId.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {Object} opts Optional parameters
     * @param {module:model/OrdersOrderIdBody} opts.body 
     * @param {module:api/ShopApi~memberOrdersUpdateOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrdersUpdateOne(memberId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrdersUpdateOne");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrdersUpdateOne");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrdersUpdateOneCancel operation.
     * @callback moduleapi/ShopApi~memberOrdersUpdateOneCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel order
     * Cancels order, changing order status to CANCELLED.  This operation is allowed unless order is in CLOSED or CONFIRMED status.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {module:api/ShopApi~memberOrdersUpdateOneCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrdersUpdateOneCancel(memberId, orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrdersUpdateOneCancel");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrdersUpdateOneCancel");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrdersUpdateOneConfirm operation.
     * @callback moduleapi/ShopApi~memberOrdersUpdateOneConfirmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm paid order
     * Confirms order, creating purchase items and changing order status to CONFIRMED.  This operation is only allowed if order is in PAID status.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {module:api/ShopApi~memberOrdersUpdateOneConfirmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrdersUpdateOneConfirm(memberId, orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrdersUpdateOneConfirm");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrdersUpdateOneConfirm");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/confirm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberOrdersUpdateOneSubmit operation.
     * @callback moduleapi/ShopApi~memberOrdersUpdateOneSubmitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit paid order
     * Submits order, freezing order items (cart) and changing order status to SUBMITTED.  This operation is only allowed if order is in OPEN status.  This operation is restricted to auth member id and elevated roles.
     * @param {String} memberId member id
     * @param {String} orderId order id
     * @param {module:api/ShopApi~memberOrdersUpdateOneSubmitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberOrdersUpdateOneSubmit(memberId, orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberOrdersUpdateOneSubmit");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling memberOrdersUpdateOneSubmit");
      }

      let pathParams = {
        'memberId': memberId,'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/members/{memberId}/orders/{orderId}/submit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberPurchaseItemsFulfillmentStatusUpdateOne operation.
     * @callback moduleapi/ShopApi~memberPurchaseItemsFulfillmentStatusUpdateOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update one member purchase item, update fulfillment status
     * Updates fulfillment status on specified member purchase item.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} purchaseItemId purchase item id
     * @param {Object} opts Optional parameters
     * @param {module:model/PurchaseItemIdFulfillmentStatusBody} opts.body 
     * @param {module:api/ShopApi~memberPurchaseItemsFulfillmentStatusUpdateOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberPurchaseItemsFulfillmentStatusUpdateOne(memberId, purchaseItemId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberPurchaseItemsFulfillmentStatusUpdateOne");
      }
      // verify the required parameter 'purchaseItemId' is set
      if (purchaseItemId === undefined || purchaseItemId === null) {
        throw new Error("Missing the required parameter 'purchaseItemId' when calling memberPurchaseItemsFulfillmentStatusUpdateOne");
      }

      let pathParams = {
        'memberId': memberId,'purchaseItemId': purchaseItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/members/{memberId}/purchaseItems/{purchaseItemId}/fulfillmentStatus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberPurchaseItemsList operation.
     * @callback moduleapi/ShopApi~memberPurchaseItemsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List member purchase items
     * Returns all member purchase items.  If param filterStatus is provided the results will be filtered by given status.  This operation is restricted to auth memberId or elevated roles.
     * @param {String} memberId member id
     * @param {Object} opts Optional parameters
     * @param {module:model/ShopPurchaseItemFulfillmentStatus} opts.filterStatus member id
     * @param {Boolean} opts.includeDeleted 
     * @param {module:api/ShopApi~memberPurchaseItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberPurchaseItemsList(memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberPurchaseItemsList");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        'filterStatus': opts['filterStatus'],'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/members/{memberId}/purchaseItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberPurchaseItemsUpdateOne operation.
     * @callback moduleapi/ShopApi~memberPurchaseItemsUpdateOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update one member purchase item
     * Updates specified member purchase item.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} purchaseItemId purchase item id
     * @param {Object} opts Optional parameters
     * @param {module:model/PurchaseItemsPurchaseItemIdBody} opts.body 
     * @param {module:api/ShopApi~memberPurchaseItemsUpdateOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberPurchaseItemsUpdateOne(memberId, purchaseItemId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberPurchaseItemsUpdateOne");
      }
      // verify the required parameter 'purchaseItemId' is set
      if (purchaseItemId === undefined || purchaseItemId === null) {
        throw new Error("Missing the required parameter 'purchaseItemId' when calling memberPurchaseItemsUpdateOne");
      }

      let pathParams = {
        'memberId': memberId,'purchaseItemId': purchaseItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/members/{memberId}/purchaseItems/{purchaseItemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the shopItemsCreate operation.
     * @callback moduleapi/ShopApi~shopItemsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create shop item
     * Create shop item.  This operation is restricted to elevated roles.
     * @param {Object} opts Optional parameters
     * @param {module:model/ShopItemsBody} opts.body 
     * @param {module:api/ShopApi~shopItemsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    shopItemsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/shop/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the shopItemsDeleteOne operation.
     * @callback moduleapi/ShopApi~shopItemsDeleteOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete shop item
     * Delete shop item.  This operation is restricted to users with elevated role.
     * @param {String} itemId item id
     * @param {module:api/ShopApi~shopItemsDeleteOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    shopItemsDeleteOne(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling shopItemsDeleteOne");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/shop/items/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the shopItemsList operation.
     * @callback moduleapi/ShopApi~shopItemsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List shop items
     * Returns all items available via shop.  This operation is restricted to elevated roles
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeDeleted 
     * @param {module:api/ShopApi~shopItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    shopItemsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/shop/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the shopItemsUpdateOne operation.
     * @callback moduleapi/ShopApi~shopItemsUpdateOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update shop item
     * Update shop item.  This operation is restricted to users with elevated role.
     * @param {String} itemId item id
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemsItemIdBody} opts.body 
     * @param {module:api/ShopApi~shopItemsUpdateOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    shopItemsUpdateOne(itemId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling shopItemsUpdateOne");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/shop/items/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}