/**
 * MyOhioAssembly.com Public API
 * REST API for MyOhioAssembly.com
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: contact@myohioassembly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsDeleteOne200Response from '../model/AccountsDeleteOne200Response';
import AccountsList200Response from '../model/AccountsList200Response';
import AuthAccountPasswordResetCreate200Response from '../model/AuthAccountPasswordResetCreate200Response';
import AuthEmailUpdateVerify404Response from '../model/AuthEmailUpdateVerify404Response';
import AuthLoginCreate400Response from '../model/AuthLoginCreate400Response';
import AuthLoginCreate401Response from '../model/AuthLoginCreate401Response';

/**
* Admin service.
* @module api/AdminApi
* @version 0.1.0
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountsDeleteOne operation.
     * @callback module:api/AdminApi~accountsDeleteOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountsDeleteOne200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete one account
     * Delete one account.  This operation is restricted to administrators
     * @param {String} accountId account id
     * @param {module:api/AdminApi~accountsDeleteOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountsDeleteOne200Response}
     */
    accountsDeleteOne(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsDeleteOne");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountsDeleteOne200Response;
      return this.apiClient.callApi(
        '/accounts/{accountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsList operation.
     * @callback module:api/AdminApi~accountsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all accounts
     * List all accounts except any sensitive auth data and member data.  This operation is restricted to administrators
     * @param {module:api/AdminApi~accountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountsList200Response}
     */
    accountsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountsList200Response;
      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authAccountPasswordResetCreate operation.
     * @callback module:api/AdminApi~authAccountPasswordResetCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthAccountPasswordResetCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password reset account
     * Reset account password.  This operation is restricted to elevated roles.  This action will also cause an email to be sent to user with a temporary password which must be changed upon first logging in.
     * @param {String} accountId account id
     * @param {module:api/AdminApi~authAccountPasswordResetCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthAccountPasswordResetCreate200Response}
     */
    authAccountPasswordResetCreate(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling authAccountPasswordResetCreate");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthAccountPasswordResetCreate200Response;
      return this.apiClient.callApi(
        '/accounts/{accountId}/pass/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
