/*
 * MyOhioAssembly.com Public API
 * REST API for MyOhioAssembly.com
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@myohioassembly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20012} from '../model/InlineResponse20012';
import {InlineResponse20013} from '../model/InlineResponse20013';
import {InlineResponse20014} from '../model/InlineResponse20014';
import {InlineResponse20015} from '../model/InlineResponse20015';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {InlineResponse404} from '../model/InlineResponse404';
import {InlineResponse4093} from '../model/InlineResponse4093';
import {MembershipDocKey} from '../model/MembershipDocKey';

/**
* Docs service.
* @module api/DocsApi
* @version 0.1.0
*/
export class DocsApi {

    /**
    * Constructs a new DocsApi. 
    * @alias module:api/DocsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the credentialCardsGetOne operation.
     * @callback moduleapi/DocsApi~credentialCardsGetOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public credential card
     * Get existing credential card unless expired or deleted.  This is a public operation.
     * @param {String} masterRecordNumber unique master record number for credential card
     * @param {module:api/DocsApi~credentialCardsGetOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    credentialCardsGetOne(masterRecordNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'masterRecordNumber' is set
      if (masterRecordNumber === undefined || masterRecordNumber === null) {
        throw new Error("Missing the required parameter 'masterRecordNumber' when calling credentialCardsGetOne");
      }

      let pathParams = {
        'masterRecordNumber': masterRecordNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/credentialCards/{masterRecordNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberDocsCreate operation.
     * @callback moduleapi/DocsApi~memberDocsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new member doc
     * Upload new document owned by member.  This operation will fail if a document already exists with same owner and file name.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {module:model/MembershipDocKey} docKey member id
     * @param {Object} opts Optional parameters
     * @param {String} opts.docName 
     * @param {Blob} opts.docFile 
     * @param {module:api/DocsApi~memberDocsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberDocsCreate(memberId, docKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberDocsCreate");
      }
      // verify the required parameter 'docKey' is set
      if (docKey === undefined || docKey === null) {
        throw new Error("Missing the required parameter 'docKey' when calling memberDocsCreate");
      }

      let pathParams = {
        'memberId': memberId,'docKey': docKey
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'docName': opts['docName'],'docFile': opts['docFile']
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/members/{memberId}/docs/{docKey}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberDocsDeleteOne operation.
     * @callback moduleapi/DocsApi~memberDocsDeleteOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing member doc
     * Delete document owned by member. This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {module:model/MembershipDocKey} docKey member id
     * @param {module:api/DocsApi~memberDocsDeleteOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberDocsDeleteOne(memberId, docKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberDocsDeleteOne");
      }
      // verify the required parameter 'docKey' is set
      if (docKey === undefined || docKey === null) {
        throw new Error("Missing the required parameter 'docKey' when calling memberDocsDeleteOne");
      }

      let pathParams = {
        'memberId': memberId,'docKey': docKey
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/members/{memberId}/docs/{docKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberDocsDownload operation.
     * @callback moduleapi/DocsApi~memberDocsDownloadCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download one member doc
     * Returns file download.  This operation will check that memberdocId matches claim in signature JWT.
     * @param {String} memberDocId member doc id
     * @param {String} signature JWT signature
     * @param {module:api/DocsApi~memberDocsDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberDocsDownload(memberDocId, signature, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberDocId' is set
      if (memberDocId === undefined || memberDocId === null) {
        throw new Error("Missing the required parameter 'memberDocId' when calling memberDocsDownload");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling memberDocsDownload");
      }

      let pathParams = {
        'memberDocId': memberDocId
      };
      let queryParams = {
        'signature': signature
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/png', 'application/pdf', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/memberDocs/{memberDocId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberDocsGet operation.
     * @callback moduleapi/DocsApi~memberDocsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get member docs
     * Gets data on all member docs.  This operation is restricted to currently auth member&#x27;s memberId unless role is elevated
     * @param {String} memberId member id
     * @param {module:api/DocsApi~memberDocsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberDocsGet(memberId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberDocsGet");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/members/{memberId}/docs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberDocsNameUpdateOne operation.
     * @callback moduleapi/DocsApi~memberDocsNameUpdateOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing member doc name
     * Update name of document owned by member.  This operation will not modify the document contents.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {module:model/MembershipDocKey} docKey member id
     * @param {Object} opts Optional parameters
     * @param {String} opts.docName 
     * @param {module:api/DocsApi~memberDocsNameUpdateOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberDocsNameUpdateOne(memberId, docKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberDocsNameUpdateOne");
      }
      // verify the required parameter 'docKey' is set
      if (docKey === undefined || docKey === null) {
        throw new Error("Missing the required parameter 'docKey' when calling memberDocsNameUpdateOne");
      }

      let pathParams = {
        'memberId': memberId,'docKey': docKey
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'docName': opts['docName']
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/members/{memberId}/docs/{docKey}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberDocsUpdateOne operation.
     * @callback moduleapi/DocsApi~memberDocsUpdateOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing member doc
     * Upload new member document.  This operation will create a new document associated with docKey and original doc will be archived.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {module:model/MembershipDocKey} docKey member id
     * @param {Object} opts Optional parameters
     * @param {String} opts.docName 
     * @param {Blob} opts.docFile 
     * @param {module:api/DocsApi~memberDocsUpdateOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberDocsUpdateOne(memberId, docKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberDocsUpdateOne");
      }
      // verify the required parameter 'docKey' is set
      if (docKey === undefined || docKey === null) {
        throw new Error("Missing the required parameter 'docKey' when calling memberDocsUpdateOne");
      }

      let pathParams = {
        'memberId': memberId,'docKey': docKey
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'docName': opts['docName'],'docFile': opts['docFile']
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/members/{memberId}/docs/{docKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}