/**
 * MyOhioAssembly.com Public API
 * REST API for MyOhioAssembly.com
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: contact@myohioassembly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthEmailUpdateVerify404Response from '../model/AuthEmailUpdateVerify404Response';
import AuthLoginCreate400Response from '../model/AuthLoginCreate400Response';
import AuthLoginCreate401Response from '../model/AuthLoginCreate401Response';
import CredentialCardsGetOne200Response from '../model/CredentialCardsGetOne200Response';
import MemberCredentialCardsCreate201Response from '../model/MemberCredentialCardsCreate201Response';
import MemberCredentialCardsCreate409Response from '../model/MemberCredentialCardsCreate409Response';
import MemberCredentialCardsCreateRequest from '../model/MemberCredentialCardsCreateRequest';
import MemberCredentialCardsDeleteOne200Response from '../model/MemberCredentialCardsDeleteOne200Response';
import MemberCredentialCardsList200Response from '../model/MemberCredentialCardsList200Response';
import MemberCredentialCardsUpdateOneExpiryRequest from '../model/MemberCredentialCardsUpdateOneExpiryRequest';
import MemberCredentialCardsUpdateOnePrint409Response from '../model/MemberCredentialCardsUpdateOnePrint409Response';
import MemberCredentialCardsUpdateOneVerify409Response from '../model/MemberCredentialCardsUpdateOneVerify409Response';

/**
* CredentialCards service.
* @module api/CredentialCardsApi
* @version 0.1.0
*/
export default class CredentialCardsApi {

    /**
    * Constructs a new CredentialCardsApi. 
    * @alias module:api/CredentialCardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the credentialCardsGetOne operation.
     * @callback module:api/CredentialCardsApi~credentialCardsGetOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialCardsGetOne200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public credential card
     * Get existing credential card unless expired or deleted.  This is a public operation.
     * @param {String} masterRecordNumber unique master record number for credential card
     * @param {module:api/CredentialCardsApi~credentialCardsGetOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialCardsGetOne200Response}
     */
    credentialCardsGetOne(masterRecordNumber, callback) {
      let postBody = null;
      // verify the required parameter 'masterRecordNumber' is set
      if (masterRecordNumber === undefined || masterRecordNumber === null) {
        throw new Error("Missing the required parameter 'masterRecordNumber' when calling credentialCardsGetOne");
      }

      let pathParams = {
        'masterRecordNumber': masterRecordNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CredentialCardsGetOne200Response;
      return this.apiClient.callApi(
        '/credentialCards/{masterRecordNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberCredentialCardsCreate operation.
     * @callback module:api/CredentialCardsApi~memberCredentialCardsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberCredentialCardsCreate201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create credential card
     * Create credential card.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {Object} opts Optional parameters
     * @param {module:model/MemberCredentialCardsCreateRequest} [memberCredentialCardsCreateRequest] 
     * @param {module:api/CredentialCardsApi~memberCredentialCardsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberCredentialCardsCreate201Response}
     */
    memberCredentialCardsCreate(memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['memberCredentialCardsCreateRequest'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsCreate");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MemberCredentialCardsCreate201Response;
      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberCredentialCardsDeleteOne operation.
     * @callback module:api/CredentialCardsApi~memberCredentialCardsDeleteOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberCredentialCardsDeleteOne200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete credential card
     * Delete credential card even if deleted.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {module:api/CredentialCardsApi~memberCredentialCardsDeleteOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberCredentialCardsDeleteOne200Response}
     */
    memberCredentialCardsDeleteOne(memberId, credentialCardId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsDeleteOne");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsDeleteOne");
      }

      let pathParams = {
        'memberId': memberId,
        'credentialCardId': credentialCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MemberCredentialCardsDeleteOne200Response;
      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberCredentialCardsGetOne operation.
     * @callback module:api/CredentialCardsApi~memberCredentialCardsGetOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberCredentialCardsCreate201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one member credential card
     * Get one member credential card even if expired but not if deleted.  This operation is restricted to auth user's memberId and elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {module:api/CredentialCardsApi~memberCredentialCardsGetOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberCredentialCardsCreate201Response}
     */
    memberCredentialCardsGetOne(memberId, credentialCardId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsGetOne");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsGetOne");
      }

      let pathParams = {
        'memberId': memberId,
        'credentialCardId': credentialCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MemberCredentialCardsCreate201Response;
      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberCredentialCardsList operation.
     * @callback module:api/CredentialCardsApi~memberCredentialCardsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberCredentialCardsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List member credential cards
     * Get all member credential cards even if expired but not if deleted.  This operation is restricted to auth user's memberId and elevated roles.
     * @param {String} memberId member id
     * @param {Boolean} includeDeleted 
     * @param {module:api/CredentialCardsApi~memberCredentialCardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberCredentialCardsList200Response}
     */
    memberCredentialCardsList(memberId, includeDeleted, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsList");
      }
      // verify the required parameter 'includeDeleted' is set
      if (includeDeleted === undefined || includeDeleted === null) {
        throw new Error("Missing the required parameter 'includeDeleted' when calling memberCredentialCardsList");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        'includeDeleted': includeDeleted
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MemberCredentialCardsList200Response;
      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberCredentialCardsUpdateOneExpiry operation.
     * @callback module:api/CredentialCardsApi~memberCredentialCardsUpdateOneExpiryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberCredentialCardsCreate201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update expiration date on credential card
     * Update expiration date on credential card.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {Object} opts Optional parameters
     * @param {module:model/MemberCredentialCardsUpdateOneExpiryRequest} [memberCredentialCardsUpdateOneExpiryRequest] 
     * @param {module:api/CredentialCardsApi~memberCredentialCardsUpdateOneExpiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberCredentialCardsCreate201Response}
     */
    memberCredentialCardsUpdateOneExpiry(memberId, credentialCardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['memberCredentialCardsUpdateOneExpiryRequest'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsUpdateOneExpiry");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsUpdateOneExpiry");
      }

      let pathParams = {
        'memberId': memberId,
        'credentialCardId': credentialCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MemberCredentialCardsCreate201Response;
      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}/expiration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberCredentialCardsUpdateOnePrint operation.
     * @callback module:api/CredentialCardsApi~memberCredentialCardsUpdateOnePrintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberCredentialCardsCreate201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print credential card
     * Print credential card.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {module:api/CredentialCardsApi~memberCredentialCardsUpdateOnePrintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberCredentialCardsCreate201Response}
     */
    memberCredentialCardsUpdateOnePrint(memberId, credentialCardId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsUpdateOnePrint");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsUpdateOnePrint");
      }

      let pathParams = {
        'memberId': memberId,
        'credentialCardId': credentialCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MemberCredentialCardsCreate201Response;
      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}/print', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberCredentialCardsUpdateOneVerify operation.
     * @callback module:api/CredentialCardsApi~memberCredentialCardsUpdateOneVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberCredentialCardsCreate201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify credential card
     * Verify credential card.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {module:api/CredentialCardsApi~memberCredentialCardsUpdateOneVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberCredentialCardsCreate201Response}
     */
    memberCredentialCardsUpdateOneVerify(memberId, credentialCardId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsUpdateOneVerify");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsUpdateOneVerify");
      }

      let pathParams = {
        'memberId': memberId,
        'credentialCardId': credentialCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MemberCredentialCardsCreate201Response;
      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}/verify', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
