/*
 * MyOhioAssembly.com Public API
 * REST API for MyOhioAssembly.com
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@myohioassembly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CredentialCardIdExpirationBody} from '../model/CredentialCardIdExpirationBody';
import {InlineResponse20010} from '../model/InlineResponse20010';
import {InlineResponse20011} from '../model/InlineResponse20011';
import {InlineResponse20015} from '../model/InlineResponse20015';
import {InlineResponse2011} from '../model/InlineResponse2011';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse401} from '../model/InlineResponse401';
import {InlineResponse404} from '../model/InlineResponse404';
import {InlineResponse4094} from '../model/InlineResponse4094';
import {InlineResponse4095} from '../model/InlineResponse4095';
import {InlineResponse4096} from '../model/InlineResponse4096';
import {MemberIdCredentialCardsBody} from '../model/MemberIdCredentialCardsBody';

/**
* CredentialCards service.
* @module api/CredentialCardsApi
* @version 0.1.0
*/
export class CredentialCardsApi {

    /**
    * Constructs a new CredentialCardsApi. 
    * @alias module:api/CredentialCardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the credentialCardsGetOne operation.
     * @callback moduleapi/CredentialCardsApi~credentialCardsGetOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public credential card
     * Get existing credential card unless expired or deleted.  This is a public operation.
     * @param {String} masterRecordNumber unique master record number for credential card
     * @param {module:api/CredentialCardsApi~credentialCardsGetOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    credentialCardsGetOne(masterRecordNumber, callback) {
      
      let postBody = null;
      // verify the required parameter 'masterRecordNumber' is set
      if (masterRecordNumber === undefined || masterRecordNumber === null) {
        throw new Error("Missing the required parameter 'masterRecordNumber' when calling credentialCardsGetOne");
      }

      let pathParams = {
        'masterRecordNumber': masterRecordNumber
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/credentialCards/{masterRecordNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberCredentialCardsCreate operation.
     * @callback moduleapi/CredentialCardsApi~memberCredentialCardsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create credential card
     * Create credential card.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {Object} opts Optional parameters
     * @param {module:model/MemberIdCredentialCardsBody} opts.body 
     * @param {module:api/CredentialCardsApi~memberCredentialCardsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberCredentialCardsCreate(memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsCreate");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberCredentialCardsDeleteOne operation.
     * @callback moduleapi/CredentialCardsApi~memberCredentialCardsDeleteOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete credential card
     * Delete credential card even if deleted.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {module:api/CredentialCardsApi~memberCredentialCardsDeleteOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberCredentialCardsDeleteOne(memberId, credentialCardId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsDeleteOne");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsDeleteOne");
      }

      let pathParams = {
        'memberId': memberId,'credentialCardId': credentialCardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberCredentialCardsGetOne operation.
     * @callback moduleapi/CredentialCardsApi~memberCredentialCardsGetOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one member credential card
     * Get one member credential card even if expired but not if deleted.  This operation is restricted to auth user&#x27;s memberId and elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {module:api/CredentialCardsApi~memberCredentialCardsGetOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberCredentialCardsGetOne(memberId, credentialCardId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsGetOne");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsGetOne");
      }

      let pathParams = {
        'memberId': memberId,'credentialCardId': credentialCardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberCredentialCardsList operation.
     * @callback moduleapi/CredentialCardsApi~memberCredentialCardsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List member credential cards
     * Get all member credential cards even if expired but not if deleted.  This operation is restricted to auth user&#x27;s memberId and elevated roles.
     * @param {String} memberId member id
     * @param {Boolean} includeDeleted 
     * @param {module:api/CredentialCardsApi~memberCredentialCardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberCredentialCardsList(memberId, includeDeleted, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsList");
      }
      // verify the required parameter 'includeDeleted' is set
      if (includeDeleted === undefined || includeDeleted === null) {
        throw new Error("Missing the required parameter 'includeDeleted' when calling memberCredentialCardsList");
      }

      let pathParams = {
        'memberId': memberId
      };
      let queryParams = {
        'includeDeleted': includeDeleted
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberCredentialCardsUpdateOneExpiry operation.
     * @callback moduleapi/CredentialCardsApi~memberCredentialCardsUpdateOneExpiryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update expiration date on credential card
     * Update expiration date on credential card.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {Object} opts Optional parameters
     * @param {module:model/CredentialCardIdExpirationBody} opts.body 
     * @param {module:api/CredentialCardsApi~memberCredentialCardsUpdateOneExpiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberCredentialCardsUpdateOneExpiry(memberId, credentialCardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsUpdateOneExpiry");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsUpdateOneExpiry");
      }

      let pathParams = {
        'memberId': memberId,'credentialCardId': credentialCardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}/expiration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberCredentialCardsUpdateOnePrint operation.
     * @callback moduleapi/CredentialCardsApi~memberCredentialCardsUpdateOnePrintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print credential card
     * Print credential card.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {module:api/CredentialCardsApi~memberCredentialCardsUpdateOnePrintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberCredentialCardsUpdateOnePrint(memberId, credentialCardId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsUpdateOnePrint");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsUpdateOnePrint");
      }

      let pathParams = {
        'memberId': memberId,'credentialCardId': credentialCardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}/print', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the memberCredentialCardsUpdateOneVerify operation.
     * @callback moduleapi/CredentialCardsApi~memberCredentialCardsUpdateOneVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify credential card
     * Verify credential card.  This operation is restricted to elevated roles.
     * @param {String} memberId member id
     * @param {String} credentialCardId credential card id
     * @param {module:api/CredentialCardsApi~memberCredentialCardsUpdateOneVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    memberCredentialCardsUpdateOneVerify(memberId, credentialCardId, callback) {
      
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberCredentialCardsUpdateOneVerify");
      }
      // verify the required parameter 'credentialCardId' is set
      if (credentialCardId === undefined || credentialCardId === null) {
        throw new Error("Missing the required parameter 'credentialCardId' when calling memberCredentialCardsUpdateOneVerify");
      }

      let pathParams = {
        'memberId': memberId,'credentialCardId': credentialCardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/members/{memberId}/credentialCards/{credentialCardId}/verify', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}