/**
 * MyOhioAssembly.com Public API
 * REST API for MyOhioAssembly.com
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: contact@myohioassembly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthAccountPasswordResetCreate200Response from '../model/AuthAccountPasswordResetCreate200Response';
import AuthEmailUpdateRequest200Response from '../model/AuthEmailUpdateRequest200Response';
import AuthEmailUpdateRequest409Response from '../model/AuthEmailUpdateRequest409Response';
import AuthEmailUpdateRequestRequest from '../model/AuthEmailUpdateRequestRequest';
import AuthEmailUpdateVerify200Response from '../model/AuthEmailUpdateVerify200Response';
import AuthEmailUpdateVerify404Response from '../model/AuthEmailUpdateVerify404Response';
import AuthLoginCreate200Response from '../model/AuthLoginCreate200Response';
import AuthLoginCreate400Response from '../model/AuthLoginCreate400Response';
import AuthLoginCreate401Response from '../model/AuthLoginCreate401Response';
import AuthLoginCreate403Response from '../model/AuthLoginCreate403Response';
import AuthLoginCreate409Response from '../model/AuthLoginCreate409Response';
import AuthLoginCreateRequest from '../model/AuthLoginCreateRequest';
import AuthPasswordUpdate200Response from '../model/AuthPasswordUpdate200Response';
import AuthPasswordUpdateRequest from '../model/AuthPasswordUpdateRequest';
import AuthRefreshCreate200Response from '../model/AuthRefreshCreate200Response';

/**
* Auth service.
* @module api/AuthApi
* @version 0.1.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authAccountPasswordResetCreate operation.
     * @callback module:api/AuthApi~authAccountPasswordResetCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthAccountPasswordResetCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password reset account
     * Reset account password.  This operation is restricted to elevated roles.  This action will also cause an email to be sent to user with a temporary password which must be changed upon first logging in.
     * @param {String} accountId account id
     * @param {module:api/AuthApi~authAccountPasswordResetCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthAccountPasswordResetCreate200Response}
     */
    authAccountPasswordResetCreate(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling authAccountPasswordResetCreate");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthAccountPasswordResetCreate200Response;
      return this.apiClient.callApi(
        '/accounts/{accountId}/pass/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authEmailUpdateRequest operation.
     * @callback module:api/AuthApi~authEmailUpdateRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthEmailUpdateRequest200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Email Update Request
     * Update user email request. Both email and email conf values should match.  Email must be different from current email.  This operation will result in a confirmation email being sent to the new email.  Only after client confirmation will the email change go into effect.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthEmailUpdateRequestRequest} [authEmailUpdateRequestRequest] The respective email and conf fields should match.
     * @param {module:api/AuthApi~authEmailUpdateRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthEmailUpdateRequest200Response}
     */
    authEmailUpdateRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['authEmailUpdateRequestRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthEmailUpdateRequest200Response;
      return this.apiClient.callApi(
        '/auth/email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authEmailUpdateVerify operation.
     * @callback module:api/AuthApi~authEmailUpdateVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthEmailUpdateVerify200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm account email
     * Confirms account email
     * @param {String} token JWT signature
     * @param {module:api/AuthApi~authEmailUpdateVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthEmailUpdateVerify200Response}
     */
    authEmailUpdateVerify(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling authEmailUpdateVerify");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthEmailUpdateVerify200Response;
      return this.apiClient.callApi(
        '/auth/email/verify', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authLoginCreate operation.
     * @callback module:api/AuthApi~authLoginCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthLoginCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * New login request all users.  This operation uses basic auth where the username is the account email and the password is the account password.  This operation will fail with 409 response if account role is elevated and the 'elevatedPass' value is not provided.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthLoginCreateRequest} [authLoginCreateRequest] 
     * @param {module:api/AuthApi~authLoginCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthLoginCreate200Response}
     */
    authLoginCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['authLoginCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicEmailPassword'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthLoginCreate200Response;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authPasswordUpdate operation.
     * @callback module:api/AuthApi~authPasswordUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthPasswordUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password Update
     * Update password for currently authenticated user.  Updated password cannot match current password.  Updated elevated password cannot match current elevated password.  This operation will not affect the open auth session.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthPasswordUpdateRequest} [authPasswordUpdateRequest] The respective pass and conf fields should match if provided.  Only elevated roles require elevatedPass(Conf).
     * @param {module:api/AuthApi~authPasswordUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthPasswordUpdate200Response}
     */
    authPasswordUpdate(opts, callback) {
      opts = opts || {};
      let postBody = opts['authPasswordUpdateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthPasswordUpdate200Response;
      return this.apiClient.callApi(
        '/auth/pass', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authRefreshCreate operation.
     * @callback module:api/AuthApi~authRefreshCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthRefreshCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auth Refresh
     * Refresh auth session, which provides a new auth token for use in other authenticated requests.  This does not extend the current auth session.
     * @param {module:api/AuthApi~authRefreshCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthRefreshCreate200Response}
     */
    authRefreshCreate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerTokenRefresh'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthRefreshCreate200Response;
      return this.apiClient.callApi(
        '/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
